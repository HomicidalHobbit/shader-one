name "texture shader"
{
	version 450
	variants _ LIT
	variants _ LOD_BIAS
}

Pass {
	
	[vert]

	in vec3 inPos, vec2 inUV, vec3 inNormal;

	out vec2 outUV;
#ifdef LOD_BIAS
	out float outLodBias;
#endif
	out vec3 outNormal;

#ifdef LIT
	out vec3 outViewVec;
	out vec3 outLightVec;
#endif

	out gl_PerVertex
	{
		vec4 gl_Position;
	};

	uniform UBO 
	{
		mat4 projection;
		mat4 model;
		vec4 viewPos;
#ifdef LOD_BIAS
		float lodBias;
#endif
	} ubo;

	void main()
	{
		outUV = inUV;
#ifdef LOD_BIAS
		outLodBias = ubo.lodBias;
#endif
		vec3 worldPos = vec3(ubo.model * vec4(inPos, 1.0));
		gl_Position = ubo.projection * ubo.model * vec4(inPos.xyz, 1.0);

		vec4 pos = ubo.model * vec4(inPos, 1.0);
		outNormal = mat3(inverse(transpose(ubo.model))) * inNormal;
#ifdef LIT
		vec3 lightPos = vec3(0.0);
		vec3 lPos = mat3(ubo.model) * lightPos.xyz;
		outLightVec = lPos - pos.xyz;
		outViewVec = ubo.viewPos.xyz - pos.xyz;
#endif
	}

	[frag]

	uniform sampler2D samplerColor;

	in vec2 inUV;
#ifdef LOD_BIAS
	in float inLodBias;
#endif
	in vec3 inNormal;
#ifdef LIT
	in vec3 inViewVec;
	in vec3 inLightVec;
#endif

	out vec4 outFragColor;

	void main
	{
	#ifdef LOD_BIAS
		vec4 color = texture(samplerColor, inUV, inLodBias);
	#else
		vec4 color = texture(samplerColor, inUV);
	#endif

	#ifdef LIT
		vec3 N = normalize(inNormal);
		vec3 L = normalize(inLightVec);
		vec3 V = normalize(inViewVec);
		vec3 R = reflect(-L, N);
		vec3 diffuse = max(dot(N, L), 0.0) * vec3(1.0);
		float specular = pow(max(dot(R, V), 0.0), 16.0) * color.a;
		outFragColor = vec4(diffuse * color.rgb + specular, 1.0);
	#else
		outFragColor = vec4(color.xyz, 1.0);
	#endif
	}
}
